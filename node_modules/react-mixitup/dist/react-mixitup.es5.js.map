{"version":3,"file":"react-mixitup.es5.js","sources":["../src/utils.ts","../src/react-mixitup.tsx"],"sourcesContent":["import { IFrame, getKeysHash } from './react-mixitup';\n\nexport const createFrame = (keys: (string | number)[], index: number): IFrame => {\n  const nextHash = getKeysHash(keys);\n  return {\n    index,\n    hash: nextHash,\n    keys,\n    containerHeight: undefined,\n    containerWidth: undefined,\n    positions: {},\n    hasBeenMeasured: false\n  };\n};\n","import React from 'react';\nimport { createFrame } from './utils';\n\n/**\n * IPosition\n *\n * The position of a cell. x and y are its offsetX and offsetY position.\n * If a cell is to be removed or added the scale property will be added, 0 to 1\n */\ninterface IPosition {\n  x: number;\n  y: number;\n  scale?: number;\n}\n/**\n * IPositions\n *\n * The collection of positions for each key\n */\ninterface IPositions {\n  [key: string]: IPosition;\n}\n\n/**\n * StageType\n *\n * Determines what to render in the component\n */\nexport enum StageType {\n  /**\n   * STALE\n   *\n   * If the animation finishes the next stage will be STALE.\n   * Render the cells in the wrapper statically positioned.\n   */\n  STALE = 'STALE',\n  /**\n   * MEASURE\n   *\n   * If oldKeys.join() != nextKeys.join() then the next stage will be MEASURE.\n   *\n   * Render next cells in a hidden div and measure the position of each next cell.\n   * Measure the height of the next hidden wrapper.\n   *\n   * Measure the position of each old cell.\n   * Measure the height of the old wrapper.\n   */\n  MEASURE = 'MEASURE',\n  /**\n   * COMMIT\n   *\n   * If stage is MEASURE then the next stage will be COMMIT.\n   *\n   * Render all unique cells from the old list of keys and the next list of keys.\n   *\n   * All cells are position absolute. The old cells should be css translated to their old position and scaled to 1.\n   *\n   * All new cells, i.e those keys in next keys which are not in old keys should be translated to their\n   * next position, and scaled to 0.\n   */\n  COMMIT = 'COMMIT',\n  /**\n   * ANIMATE\n   *\n   * If stage is COMMIT or ANIMATE_COMMIT then the next stage will be ANIMATE.\n   *\n   * For each cell that should be moved, i.e the intersection between old keys and new keys, update style.translate to the new position.\n   *\n   * For each cell that should be removed, i.e those in old keys not present in new keys, update style.scale to 0\n   *\n   * For each cell that should be added, i.e. those in new keys not present in old keys, update style.cale to 1\n   */\n  ANIMATE = 'ANIMATE'\n  /**\n   * ANIMATE_MEASURE\n   *\n   * If stage is ANIMATE, and the keys are updated then the next stage will be ANIMATE_MEASURE.\n   *\n   * Render next cells in a hidden div and measure the position of each next cell.\n   * Measure the height of the next hidden wrapper.\n   *\n   * The positions of the old cells should already be measured\n   *\n   * Render the same as in ANIMATE while rendering the measuring component.\n   *\n   */\n  // replaced by MEASURE where stage.whileAnimating = true;\n  // ANIMATE_MEASURE = 'ANIMATE_MEASURE',\n  /**\n   * ANIMATE_COMMIT\n   *\n   * If stage is ANIMATE_MEASURE then the next stage will be ANIMATE_COMMIT.\n   *\n   * Render all unique cells from the old lists of keys (notice plural on lists) and the next list of keys.\n   * That is the the same as in ANIMATE.\n   *\n   * All cells which are now to be removed should be scaled to 0.\n   *\n   * All new cells, i.e those keys in next keys which are not in old keys should be translated to their\n   * next position, and scaled to 0.\n   */\n  // replaced by COMMIT where stage.whileAnimating = true;\n  // ANIMATE_COMMIT = 'ANIMATE_COMMIT'\n}\n\n/**\n * IFrame\n *\n * Holds information about the keys of rendered cells\n */\nexport interface IFrame {\n  /**\n   * The height of the container when all cells are rendered.\n   */\n  containerHeight: number | undefined;\n  /**\n   * The width of the container when all cells are rendered.\n   */\n  containerWidth: number | undefined;\n  /**\n   * The keys which should be rendered\n   */\n  keys: (string | number)[];\n  /**\n   * The positions of each cell\n   */\n  positions: IPositions;\n  /**\n   * A unique index used for debugging purposes to differentiate each IFrame\n   */\n  index: number;\n  /**\n   * If the frame has been measured\n   */\n  hasBeenMeasured: boolean;\n  /**\n   * a hash generated from the keys\n   */\n  hash: string;\n}\n\n/**\n * ICellStyle\n *\n * The styles passed to a renderCell\n */\nexport interface ICellStyle {\n  position?: 'absolute';\n  top?: string;\n  left?: string;\n  margin?: '0px';\n  transition?: string;\n  transform?: string;\n}\n\n/**\n * IWrapperStyle\n *\n * The styles passed to the renderWrapper\n */\nexport interface IWrapperStyle {\n  // position absolute in MEASURE stage and position relative in ANIMATE and COMMIT stage\n  // undefined in STALE stage\n  position?: 'absolute' | 'relative';\n  width?: number;\n  height?: number;\n  visibility?: 'hidden';\n  zIndex?: -1;\n}\n\n/**\n * IProps\n *\n * The props accepted by ReactMixitup\n */\ninterface IProps {\n  /**\n   * keys should be a unique list of strings.\n   */\n  keys: (string | number)[];\n  /**\n   * MUST return a react node.\n   *\n   * The item.key corresponds to a key in the keys prop.\n   * You should use the key to render the correct data in the cell.\n   *\n   * It MUST accept style and forward that to the returned component.\n   * Style contains the transition styles.\n   *\n   * The ref MUST also be attached to the returned element so\n   * ReactMixitup is able to measure the position of the cell.\n   */\n  renderCell: (\n    key: string | number,\n    style: ICellStyle,\n    ref: React.Ref<any>,\n    stage: StageType,\n    frame: IFrame,\n    activeFrame: boolean\n  ) => React.ReactNode | JSX.Element;\n\n  /**\n   * Optional, by default ReactMixitup will wrap all cells in a div.\n   *\n   * If provided renderWrapper MUST return a React node which accepts the provided style and ref.\n   *\n   * The ref is used to measure the height of the wrapping container.\n   *\n   * The style is used to update the height of the wrapping container.\n   * By setting the transition: height style property on the wrapper the height can be animated.\n   */\n  renderWrapper?: (\n    style: IWrapperStyle,\n    ref: React.Ref<any>,\n    cells: JSX.Element[],\n    stage: StageType,\n    frame: IFrame,\n    activeFrame: boolean\n  ) => React.ReactNode | JSX.Element;\n\n  /**\n   * Disable the transition\n   */\n  disableTransition?: boolean;\n\n  /**\n   * If the wrapper should grow/shrink vertically or horizontally when adding and removing cells\n   */\n  dynamicDirection: 'horizontal' | 'vertical' | 'off';\n\n  transitionDuration: number;\n\n  // default false. If true will remeasure all previous frames.\n  // only useful if resizing container while animation is slow and multiple animations are queued.\n  reMeasureAllPreviousFramesOnNewKeys?: boolean;\n\n  // default undefined. if number will render the measure container, and keep it for debugMeasure ms\n  // before removing\n  debugMeasure?: number;\n}\n\n/**\n * Creates a hash of the keys in order to determine if the keys are updated\n */\nexport function getKeysHash(keys: (string | number)[]): string {\n  return keys.map(k => `${(typeof k)[0]}${k}`).join(',');\n}\n\nexport enum DOMLevel {\n  ROOT = 'ROOT',\n  VISIBLE = 'VISIBLE',\n  WRAPPER = 'WRAPPER',\n  HIDDEN = 'HIDDEN'\n}\n\nexport const MixitupFragment = ({\n  children,\n  level\n}: {\n  children: React.ReactNode;\n  level: DOMLevel;\n}) => {\n  return <React.Fragment>{children}</React.Fragment>;\n};\n\n/**\n * MUST return a React node which accepts the provided style and ref.\n *\n * The ref is used to measure the height of the wrapping container.\n *\n * The style is used to update the height of the wrapping container.\n * By setting the transition: height style property on the wrapper the height can be animated.\n */\nexport type RenderWrapper = Exclude<IProps['renderWrapper'], undefined>;\n\n/**\n * MUST return a react node.\n *\n * The item.key corresponds to a key in the keys prop.\n * You should use the key to render the correct data in the cell.\n *\n * It MUST accept style and forward that to the returned component.\n * Style contains the transition styles.\n *\n * The ref MUST also be attached to the returned element so\n * ReactMixitup is able to measure the position of the cell.\n */\nexport type RenderCell = Exclude<IProps['renderCell'], undefined>;\n\n/**\n * Default renderer\n */\nconst defaultRenderWrapper: RenderWrapper = (style, ref, cells) => {\n  return (\n    <div style={style} ref={ref}>\n      {cells}\n    </div>\n  );\n};\n\nexport const TEST_COMPONENT_UPDATE_DELAY = 100;\n\ntype Stage =\n  | {\n      type: StageType.MEASURE;\n      frameToMeasure: IFrame;\n      whileAnimating: boolean;\n    }\n  | {\n      type: StageType.ANIMATE;\n    }\n  | {\n      type: StageType.COMMIT;\n      whileAnimating: boolean;\n    }\n  | {\n      type: StageType.STALE;\n      frame: IFrame;\n    };\n\nconst NotifyAboutRendered = ({\n  children,\n  frame\n}: {\n  children: React.ReactNode | JSX.Element;\n  frame: IFrame;\n}) => {\n  React.useLayoutEffect(() => {\n    frame.hasBeenMeasured = true;\n  }, [frame]);\n  return <>{children}</>;\n};\n\nconst processEnv = (name: string) => {\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env[name];\n  }\n};\n\nconst debug = (...msg: any[]) => {\n  if (processEnv('DEBUG:react-mixitup')) {\n    console.log(...msg);\n  } else if (typeof window !== 'undefined' && window.localStorage) {\n    if (window.localStorage.getItem('DEBUG:react-mixitup')) {\n      console.log(...msg);\n    }\n  }\n};\n\nexport const ReactMixitup = React.memo(\n  React.forwardRef(\n    (props: IProps, outerBoundRef: React.Ref<HTMLDivElement>): JSX.Element | null => {\n      const {\n        keys,\n        renderCell,\n        renderWrapper = defaultRenderWrapper,\n        disableTransition: disableTransitionProp,\n        dynamicDirection,\n        transitionDuration\n      } = props;\n\n      const disableTransition = !!disableTransitionProp || transitionDuration === 0 || false;\n\n      if (!keys) {\n        throw new Error('Invalid keys: keys must be provided');\n      }\n\n      if (new Set(keys).size !== keys.length) {\n        throw new Error('Invalid keys: every key must be unique');\n      }\n\n      if (typeof transitionDuration !== 'number' || transitionDuration < 0) {\n        throw new Error('Invalid transitionDuration: transition duration must be a number > 0');\n      }\n\n      if (!renderCell || typeof renderCell !== 'function') {\n        throw new Error('Invalid renderCell: must be a function');\n      }\n\n      if (!renderWrapper || typeof renderWrapper !== 'function') {\n        throw new Error('Invalid renderWrapper: must be a function');\n      }\n\n      if (props.debugMeasure && typeof props.debugMeasure !== 'number') {\n        throw new Error('Invalid debugMeasure: must be a number');\n      }\n\n      const indexRef = React.useRef(0);\n\n      const nextHash = getKeysHash(keys);\n\n      const refs = React.useRef<{\n        frames: IFrame[];\n        persistedElement: JSX.Element | null;\n        hash: undefined | string;\n        stage: Stage;\n      }>(undefined as any);\n\n      if (!refs.current) {\n        const frame = createFrame(keys, indexRef.current++);\n        refs.current = {\n          frames: [frame],\n          persistedElement: null,\n          hash: undefined,\n          stage: { type: StageType.STALE, frame }\n        };\n      }\n\n      const [, _update] = React.useState(0);\n\n      const hasUnmounted = React.useRef(false);\n      React.useEffect(\n        () => () => {\n          hasUnmounted.current = true;\n        },\n        []\n      );\n\n      const update = () => {\n        setTimeout(\n          () => {\n            if (!hasUnmounted.current) {\n              _update(i => i + 1);\n            }\n          },\n          processEnv('NODE_ENV') === 'test' ? TEST_COMPONENT_UPDATE_DELAY : 1\n        );\n      };\n\n      function goToStale(frame: IFrame) {\n        debug('go to STALE');\n        refs.current.stage = {\n          type: StageType.STALE,\n          frame\n        };\n        // stale should always only have 1 frame\n        refs.current.frames = [frame];\n\n        update();\n      }\n\n      React.useEffect(() => {\n        const goToStaleOrNext = (cb: () => void) => {\n          if (!props.debugMeasure) {\n            cb();\n            return;\n          }\n\n          // only use case is when running with debugMeasure\n          // then you can update many times while in commit\n          // and end up at with the same keys as in the start\n          const lastFrame = refs.current.frames[refs.current.frames.length - 1];\n          if (refs.current.frames[0].hash === lastFrame.hash) {\n            debug('due to last frame being the same as first key we go straight back to STALE');\n            goToStale(lastFrame);\n          } else {\n            cb();\n          }\n        };\n        const goToAnimate = () => {\n          // from commit or measure\n          goToStaleOrNext(() => {\n            refs.current.stage = {\n              type: StageType.ANIMATE\n            };\n            if (processEnv('NODE_ENV') === 'test') {\n              setTimeout(() => {\n                update();\n              }, TEST_COMPONENT_UPDATE_DELAY);\n            } else {\n              window.requestAnimationFrame(() => {\n                update();\n              });\n            }\n          });\n        };\n        const goToCommit = (whileAnimating: boolean) => {\n          // from measure\n          goToStaleOrNext(() => {\n            refs.current.stage = {\n              type: StageType.COMMIT,\n              whileAnimating\n            };\n            update();\n          });\n        };\n        const maybeDelay = (cb: () => void) => {\n          if (props.debugMeasure) {\n            const t = setTimeout(() => {\n              cb();\n            }, props.debugMeasure);\n            return () => {\n              clearTimeout(t);\n            };\n          }\n          cb();\n        };\n        if (refs.current.stage.type === StageType.MEASURE) {\n          if (dynamicDirection === 'off') {\n            // skip COMMIT phase, go straight to ANIMATE\n            return maybeDelay(() => goToAnimate());\n          }\n          const whileAnimating = refs.current.stage.whileAnimating;\n          return maybeDelay(() => goToCommit(whileAnimating));\n        }\n\n        if (refs.current.stage.type === StageType.COMMIT) {\n          goToAnimate();\n        }\n      });\n\n      if (refs.current.hash === undefined) {\n        // first render\n        refs.current.hash = nextHash;\n      }\n\n      if (refs.current.hash !== nextHash) {\n        refs.current.hash = nextHash;\n        const frame = createFrame(keys, indexRef.current++);\n        if (disableTransition) {\n          refs.current.frames.splice(0, refs.current.frames.length, frame);\n          refs.current.stage = {\n            type: StageType.STALE,\n            frame\n          };\n        } else {\n          refs.current.frames.push(frame);\n          const whileAnimating =\n            'whileAnimating' in refs.current.stage\n              ? refs.current.stage.whileAnimating\n              : refs.current.stage.type === StageType.ANIMATE;\n          refs.current.stage = {\n            type: StageType.MEASURE,\n            frameToMeasure: frame,\n            whileAnimating\n          };\n        }\n      }\n\n      const measureGridItems = (frame: IFrame, key: string | number, el: HTMLElement) => {\n        const pos = {\n          x: el.offsetLeft,\n          y: el.offsetTop\n        };\n        frame.positions[key] = pos;\n      };\n\n      const wrapperMeasureContainerSize = (frame: IFrame, el: HTMLElement | null) => {\n        if (!el) {\n          return;\n        }\n        const h = el.offsetHeight;\n        const w = el.offsetWidth;\n        frame.containerHeight = h;\n        frame.containerWidth = w;\n      };\n\n      const cells = ({\n        ref,\n        style,\n        keys,\n        stageType,\n        activeFrame\n      }: {\n        keys: { key: string | number; frame: IFrame }[];\n        ref: (key: string | number, el: HTMLElement) => void;\n        style: (key: string | number) => ICellStyle;\n        stageType: StageType;\n        activeFrame: boolean;\n      }) => {\n        const makeRef = (key: string | number) => {\n          return (el: HTMLElement | null) => {\n            if (el) {\n              ref(key, el);\n            }\n          };\n        };\n\n        const cells = keys.map(({ key, frame }) => {\n          return (\n            <React.Fragment key={key}>\n              {renderCell(key, style(key), makeRef(key), stageType, frame, activeFrame)}\n            </React.Fragment>\n          );\n        });\n\n        return cells;\n      };\n\n      const measureFrame = (frame: IFrame, activeFrame: boolean) => (\n        <NotifyAboutRendered frame={frame}>\n          {renderWrapper(\n            props.debugMeasure\n              ? {\n                  position: 'absolute'\n                }\n              : {\n                  position: 'absolute',\n                  visibility: 'hidden',\n                  zIndex: -1\n                },\n            el => {\n              wrapperMeasureContainerSize(frame, el);\n            },\n            cells({\n              ref: (key, el) => {\n                measureGridItems(frame, key, el);\n              },\n              keys: frame.keys.map(key => ({ key, frame })),\n              style: staleStyle,\n              stageType: StageType.MEASURE,\n              activeFrame\n            }),\n            StageType.MEASURE,\n            frame,\n            activeFrame\n          )}\n        </NotifyAboutRendered>\n      );\n\n      const onEndOfTransition = () => {\n        const frame = refs.current.frames[refs.current.frames.length - 1];\n        debug('end of transition');\n        goToStale(frame);\n      };\n\n      React.useEffect(() => {\n        if (refs.current.stage.type === StageType.ANIMATE) {\n          debug('set timeout');\n          const timeout = setTimeout(() => {\n            onEndOfTransition();\n          }, transitionDuration);\n\n          return () => {\n            debug('clear timeout');\n            clearTimeout(timeout);\n          };\n        }\n      });\n\n      const staleStyle = (): ICellStyle => ({\n        transition: '0s 0s all ease',\n        transform: 'none'\n      });\n\n      debug('current stage', refs.current.stage.type);\n\n      // BEGIN RENDER\n\n      // The keys used on the React.Fragments are there to assist React in preseving the DOM tree nodes and\n      // prevent unmounting of components which interupts animation\n\n      // The hierarchies:\n      // root-level > visible-level > wrapper-level > renderWrapper\n      //      ↳     > hidden-level > [key] > wrapper-level > NotifyAboutRendered > renderWrapper\n\n      /**\n       * staleFrame\n       *\n       * Renders the cells without any modifications\n       *\n       * @param frame IFrame\n       * @returns React.ReactNode | JSX.Element\n       */\n      const staleFrame = (frame: IFrame) => (\n        <MixitupFragment key={DOMLevel.WRAPPER} level={DOMLevel.WRAPPER}>\n          {renderWrapper(\n            {},\n            () => {},\n            cells({\n              ref: () => {},\n              keys: frame.keys.map(key => ({ key, frame })),\n              style: staleStyle,\n              stageType: StageType.STALE,\n              activeFrame: true\n            }),\n            StageType.STALE,\n            frame,\n            true\n          )}\n        </MixitupFragment>\n      );\n\n      // If transitions are disabled, always render the staleFrame node\n      if (disableTransition) {\n        return (\n          <MixitupFragment key={DOMLevel.ROOT} level={DOMLevel.ROOT}>\n            <MixitupFragment key={DOMLevel.VISIBLE} level={DOMLevel.VISIBLE}>\n              {staleFrame(refs.current.frames[refs.current.frames.length - 1])}\n            </MixitupFragment>\n          </MixitupFragment>\n        );\n      }\n\n      /**\n       * getKeyFrameParticipation\n       *\n       * returns the frame indices where a key is present\n       *\n       * @param frames IFrame[]\n       * @param key string\n       * @returns number[]\n       */\n      const getKeyFrameParticipation = (frames: IFrame[], key: string | number): number[] => {\n        const indexes = [];\n        for (let i = frames.length - 1; i >= 0; i -= 1) {\n          const frame = frames[i];\n          if (frame.keys.includes(key)) {\n            indexes.push(i);\n          }\n        }\n        return indexes;\n      };\n\n      const animatedCellStyle = (\n        type: StageType.ANIMATE | StageType.COMMIT,\n        key: string | number,\n        frames: IFrame[]\n      ): ICellStyle => {\n        let z = 1;\n\n        const indexes = getKeyFrameParticipation(frames, key);\n        if (indexes.length === 0) {\n          throw new Error('something went wrong in the lib');\n        }\n\n        const { x: xTarget, y: yTarget } = frames[indexes[0]].positions[key];\n        const { x: xSource, y: ySource } = frames[indexes[indexes.length - 1]].positions[key];\n\n        const style: ICellStyle = {\n          position: 'absolute',\n          top: '0px',\n          left: '0px',\n          margin: '0px'\n        };\n\n        /* will be added */\n        // Last frame has the key.\n        // The key has not been added before.\n        // Type is commit\n        if (\n          frames[frames.length - 1].keys.includes(key) &&\n          indexes.length === 1 &&\n          type === StageType.COMMIT\n        ) {\n          // scale from 0 -> 1 when going from COMMIT -> ANIMATE\n          z = 0;\n        }\n\n        /* will be removed */\n        if (!frames[frames.length - 1].keys.includes(key)) {\n          // simply remove\n          z = 0;\n        }\n\n        const xDiff = xTarget - xSource;\n        const yDiff = yTarget - ySource;\n\n        style.left = xSource + 'px';\n        style.top = ySource + 'px';\n\n        if (type === StageType.COMMIT) {\n          style.transform = `translate3d(${[0, 0, 0].join('px,')}px) scale(${z})`;\n        } else {\n          style.transform = `translate3d(${[xDiff, yDiff, 0].join('px,')}px) scale(${z})`;\n        }\n        return style;\n      };\n\n      const getAllUniqueKeysForFrames = (frames: IFrame[]) => {\n        const keys: { frame: IFrame; key: string | number }[] = [];\n        const keysSet = new Set<string | number>();\n        frames.forEach(frame => {\n          frame.keys.forEach(key => {\n            if (keysSet.has(key)) {\n              return;\n            }\n            keysSet.add(key);\n            keys.push({ frame, key });\n          });\n        });\n        return keys;\n      };\n\n      /**\n       * animatingFrame\n       *\n       * Returns the nodes which renders while animating.\n       * Translate all elements to ther corresponding static location in the latest frame\n       *\n       * @param frames IFrame[]\n       * @returns JSX.Element\n       */\n      const animatingFrame = (frames: IFrame[]) => {\n        const lastFrame = frames[frames.length - 1];\n        const height = lastFrame.containerHeight!;\n        const width = lastFrame.containerWidth!;\n        const styles: IWrapperStyle = {\n          position: 'relative'\n        };\n        if (dynamicDirection === 'horizontal') {\n          styles.width = width;\n        } else if (dynamicDirection === 'vertical') {\n          styles.height = height;\n        }\n        const keys = getAllUniqueKeysForFrames(frames);\n        return (\n          <MixitupFragment key={DOMLevel.WRAPPER} level={DOMLevel.WRAPPER}>\n            {renderWrapper(\n              {\n                ...styles\n              },\n              () => {},\n              cells({\n                ref: (key, el) => {},\n                keys: keys,\n                style: key => {\n                  return animatedCellStyle(StageType.ANIMATE, key, frames);\n                },\n                stageType: StageType.ANIMATE,\n                activeFrame: true\n              }),\n              StageType.ANIMATE,\n              lastFrame,\n              true\n            )}\n          </MixitupFragment>\n        );\n      };\n\n      // When animating render the animatingFrame\n      if (refs.current.stage.type === StageType.ANIMATE) {\n        return (\n          <MixitupFragment key={DOMLevel.ROOT} level={DOMLevel.ROOT}>\n            <MixitupFragment key={DOMLevel.VISIBLE} level={DOMLevel.VISIBLE}>\n              {animatingFrame(refs.current.frames)}\n            </MixitupFragment>\n          </MixitupFragment>\n        );\n      }\n\n      // Commit will translate all elements to their corresponding static location of the previous frame.\n      if (refs.current.stage.type === StageType.COMMIT) {\n        const stage = refs.current.stage;\n        let sizeFrame = refs.current.frames[refs.current.frames.length - 2];\n        if (stage.whileAnimating) {\n          sizeFrame = refs.current.frames[refs.current.frames.length - 1];\n        }\n        const height = sizeFrame.containerHeight!;\n        const width = sizeFrame.containerWidth!;\n        const styles: IWrapperStyle = {\n          position: 'relative'\n        };\n        if (dynamicDirection === 'horizontal') {\n          styles.width = width;\n        } else if (dynamicDirection === 'vertical') {\n          styles.height = height;\n        }\n        const keys = getAllUniqueKeysForFrames(refs.current.frames);\n\n        return (\n          <MixitupFragment key={DOMLevel.ROOT} level={DOMLevel.ROOT}>\n            <MixitupFragment key={DOMLevel.VISIBLE} level={DOMLevel.VISIBLE}>\n              <MixitupFragment key={DOMLevel.WRAPPER} level={DOMLevel.WRAPPER}>\n                {renderWrapper(\n                  {\n                    ...styles\n                  },\n                  () => {},\n                  cells({\n                    ref: (key, el) => {},\n                    keys,\n                    style: key => {\n                      return animatedCellStyle(StageType.COMMIT, key, refs.current.frames);\n                    },\n                    stageType: StageType.COMMIT,\n                    activeFrame: true\n                  }),\n                  StageType.COMMIT,\n                  sizeFrame,\n                  true\n                )}\n              </MixitupFragment>\n            </MixitupFragment>\n          </MixitupFragment>\n        );\n      }\n\n      // Measure\n      if (refs.current.stage.type === StageType.MEASURE) {\n        const len = refs.current.frames.length;\n        const lastFrame = refs.current.frames[len - 1];\n        let measureFrames = refs.current.frames;\n        if (!props.reMeasureAllPreviousFramesOnNewKeys) {\n          measureFrames = [];\n          refs.current.frames.forEach((frame, index) => {\n            if (!frame.hasBeenMeasured) {\n              measureFrames.push(frame);\n            } else if (index >= len - 2) {\n              // push the last 2 frames\n              measureFrames.push(frame);\n            }\n          });\n        }\n        return (\n          <MixitupFragment key={DOMLevel.ROOT} level={DOMLevel.ROOT}>\n            <MixitupFragment key={DOMLevel.HIDDEN} level={DOMLevel.HIDDEN}>\n              {measureFrames.map((frame, index) => {\n                return (\n                  <React.Fragment key={frame.index}>\n                    {measureFrame(frame, index === measureFrames.length - 1)}\n                  </React.Fragment>\n                );\n              })}\n            </MixitupFragment>\n            <MixitupFragment key={DOMLevel.VISIBLE} level={DOMLevel.VISIBLE}>\n              {refs.current.stage.whileAnimating\n                ? animatingFrame(refs.current.frames.filter(frame => frame.hasBeenMeasured))\n                : staleFrame(refs.current.frames[0])}\n            </MixitupFragment>\n          </MixitupFragment>\n        );\n      }\n\n      // If stage is stale render the stale frame\n      if (refs.current.stage.type === StageType.STALE) {\n        return (\n          <MixitupFragment key={DOMLevel.ROOT} level={DOMLevel.ROOT}>\n            <MixitupFragment key={DOMLevel.VISIBLE} level={DOMLevel.VISIBLE}>\n              {staleFrame(refs.current.stage.frame)}\n            </MixitupFragment>\n          </MixitupFragment>\n        );\n      }\n\n      return null;\n    }\n  )\n);\n"],"names":[],"mappings":"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"}